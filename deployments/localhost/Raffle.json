{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__ContractNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestComfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerChance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45659608a349beadf241e6fc1c8aaa70f567b196014aa16d241a5fe0db92231e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1236767",
    "logsBloom": "0x
    "blockHash": "0x1f091c6ced3d752a2057ccace62d9505496060171538d7fb409025ad4d295b72",
    "transactionHash": "0x45659608a349beadf241e6fc1c8aaa70f567b196014aa16d241a5fe0db92231e",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1236767",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "10000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "45effb804d6b25ed5fead4e8e9133283",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__ContractNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestComfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinnerChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"kiralee.eth\",\"details\":\"\\u900f\\u904e\\u5c0e\\u5165Chainlink VRF v2 \\u548c Chainlink keepers\\u4f86\\u5b8c\\u6210\\u9019\\u500b\\u5408\\u7d04\",\"kind\":\"dev\",\"methods\":{},\"title\":\"\\u4e00\\u500b\\u7c21\\u55ae\\u7684\\u5f69\\u7968\\u5408\\u7d04\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"\\u9019\\u500b\\u5408\\u7d04\\u662f\\u5efa\\u7acb\\u4e00\\u500b\\u4e0d\\u53ef\\u7be1\\u6539\\u7684\\u53bb\\u4e2d\\u5fc3\\u5316\\u667a\\u80fd\\u5408\\u7d04\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughFee();\\nerror Raffle__TransferFailed();\\nerror Raffle__ContractNotOpen();\\nerror Raffle__UpkeepNotNeeded(\\n    uint currentBalance,\\n    uint numPlayers,\\n    uint raffleState\\n);\\n\\n/** @title \\u4e00\\u500b\\u7c21\\u55ae\\u7684\\u5f69\\u7968\\u5408\\u7d04\\n *  @author kiralee.eth\\n *  @notice \\u9019\\u500b\\u5408\\u7d04\\u662f\\u5efa\\u7acb\\u4e00\\u500b\\u4e0d\\u53ef\\u7be1\\u6539\\u7684\\u53bb\\u4e2d\\u5fc3\\u5316\\u667a\\u80fd\\u5408\\u7d04\\n *  @dev \\u900f\\u904e\\u5c0e\\u5165Chainlink VRF v2 \\u548c Chainlink keepers\\u4f86\\u5b8c\\u6210\\u9019\\u500b\\u5408\\u7d04\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    //\\u5ba3\\u544a\\u4e00\\u500b\\u65b0\\u7684\\u985e\\u578b,\\u7528\\u4f86\\u63cf\\u8ff0\\u5408\\u7d04\\u7576\\u4e0b\\u7684\\u72c0\\u614b\\u662fopen\\u9084\\u662f\\u8a08\\u7b97\\u4e2d\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* \\u72c0\\u614b\\u8b8a\\u6578\\u5ba3\\u544a */\\n    uint private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    //\\u5ba3\\u544aVRFCoordinatorV2Interface\\u5408\\u7d04\\u985e\\u578b\\u8b8a\\u6578i_COORDINATOR\\n    VRFCoordinatorV2Interface private immutable i_COORDINATOR;\\n    //\\u4ee5\\u4e0b\\u70ba\\u5ba3\\u544arequestRandomWords\\u6240\\u9700\\u8981\\u7684\\u8f38\\u5165\\u8b8a\\u6578\\n    bytes32 private immutable i_gasLane; //\\u767c\\u51farequest\\u6642\\u6700\\u5927\\u53ef\\u652f\\u4ed8\\u7684Gas\\n    uint64 private immutable i_subscriptionId; //chainLink\\u8a02\\u95b1ID\\n    uint32 private immutable i_callbackGasLimit; //Oracle\\u9810\\u8a00\\u6a5f\\u56de\\u50b3\\u96a8\\u6a5f\\u6578\\u6642(callback),\\u6700\\u5927\\u53ef\\u63a5\\u53d7\\u7684Gas\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3; //Oracle\\u9810\\u8a00\\u6a5f\\u7372\\u5f97\\u96a8\\u6a5f\\u6578\\u6642,\\u9700\\u8981\\u7b49\\u5f85\\u7684\\u78ba\\u8a8d\\u6578\\n    uint32 private constant NUM_WORDS = 1; //\\u4e00\\u6b21\\u7522\\u751f\\u5e7e\\u500b\\u96a8\\u6a5f\\u6578\\n\\n    /* \\u5f69\\u7968\\u8b8a\\u6578\\u5ba3\\u544a */\\n    address payable private s_recentWinner;\\n    RaffleState private s_raffleState; //\\u4f7f\\u7528\\u65b0\\u985e\\u578b\\u5ba3\\u544a\\u4e00\\u500b\\u8b8a\\u6578,\\u7528\\u4f86\\u5b58\\u653e\\u5408\\u7d04\\u7576\\u524d\\u7684\\u72c0\\u614b,\\u662fopen\\u9084\\u662f\\u8a08\\u7b97\\u4e2d\\n    uint private s_lastTimeStamp; //\\u4e0a\\u4e00\\u500b\\u5340\\u584a\\u6642\\u9593,\\u5ba3\\u544a\\u6b64\\u53c3\\u6578\\u7528\\u65bc\\u8a08\\u7b97\\u7d93\\u904e\\u4e86\\u591a\\u4e45\\n    uint private immutable i_interval; //\\u8a2d\\u5b9a\\u6642\\u9593\\u9593\\u9694\\n\\n    /* \\u4e8b\\u4ef6\\u5ba3\\u544a */\\n    //\\u5ba3\\u544a\\u4e00\\u500bevent,\\u8f38\\u51fa\\u4e00\\u500b\\u5730\\u5740\\n    event RaffleEnter(address indexed player);\\n    //\\u5ba3\\u544a\\u4e00\\u500bevent,\\u7576\\u767c\\u51fa\\u8acb\\u6c42\\u7372\\u5f97requestId\\u6642\\u89f8\\u767c\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    //\\u5ba3\\u544a\\u4e00\\u500bevent,\\u7576\\u627e\\u51fa\\u52dd\\u5229\\u8005\\u6642\\u89f8\\u767c\\n    event WinnerPicked(address indexed winner);\\n\\n    /* function */\\n    //\\u5728\\u5408\\u7d04\\u90e8\\u7f72\\u6642\\u6c7a\\u5b9a\\u6700\\u5c0f\\u8f38\\u5165\\u91d1\\u984d\\n    //\\u5728\\u5408\\u7d04\\u90e8\\u7f72\\u6642,\\u8f38\\u5165vrfCoordinatorV2\\u5730\\u5740,\\u585e\\u7d66VRFConsumerBaseV2\\u5408\\u7d04\\u7684constructor\\n    //\\u56e0\\u70ba\\u8a72\\u5408\\u7d04VRFConsumerBaseV2\\u7684\\u521d\\u59cb\\u5316\\u90e8\\u7f72constructor\\u9700\\u8981vrfCoordinatorV2\\u5730\\u5740\\n    constructor(\\n        address _vrfCoordinatorV2,\\n        uint _entranceFee,\\n        bytes32 _gasLane,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit,\\n        uint _interval\\n    ) VRFConsumerBaseV2(_vrfCoordinatorV2) {\\n        i_entranceFee = _entranceFee;\\n        //\\u56e0\\u70ba\\u8981\\u4f7f\\u7528VRFCoordinatorV2Interface\\u5408\\u7d04\\u5167\\u7684\\u529f\\u80fd,\\u56e0\\u6b64\\u5c07ABI\\u8207\\u5408\\u7d04\\u5730\\u5740\\u505a\\u95dc\\u806f,\\u585e\\u5230i_COORDINATOR\\u5167\\n        i_COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinatorV2);\\n        i_gasLane = _gasLane;\\n        i_subscriptionId = _subscriptionId;\\n        i_callbackGasLimit = _callbackGasLimit;\\n        //s_raffleState = RaffleState(0);\\n        s_raffleState = RaffleState.OPEN; //\\u9019\\u884c\\u8207\\u4e0a\\u9762\\u90a3\\u884c\\u76f8\\u7b49\\n        s_lastTimeStamp = block.timestamp; //\\u521d\\u59cb\\u5316,\\u5148\\u5c07s_lastTimeStamp\\u8a2d\\u5b9a\\u70ba\\u7576\\u524d\\u7684block.timestamp,\\u5c31\\u6709\\u57fa\\u6e96\\u80fd\\u5920\\u6bd4\\u8f03\\n        i_interval = _interval; //\\u8a2d\\u5b9a\\u6642\\u9593\\u9593\\u9694\\n    }\\n\\n    //\\u5165\\u91d1,\\u7d00\\u9304\\u5165\\u91d1\\u5e33\\u6236\\u5730\\u5740\\u5230\\u9663\\u5217\\u4e2d\\n    function enterRaffle() public payable {\\n        if (msg.value < i_entranceFee) {\\n            revert Raffle__NotEnoughFee();\\n        }\\n        //\\u6aa2\\u67e5\\u5408\\u7d04\\u662f\\u5426\\u958b\\u555f\\n        if (s_raffleState != RaffleState.OPEN) {\\n            revert Raffle__ContractNotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        //\\u89f8\\u767cevent\\u5c07\\u5165\\u91d1\\u7684\\u73a9\\u5bb6\\u5730\\u5740\\u986f\\u793a\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    //\\u6b64function\\u662f\\u7d66chainLink keeper node\\u547c\\u53eb\\u7684,\\u7528\\u4f86\\u6aa2\\u67e5\\u689d\\u4ef6\\u662f\\u5426\\u6eff\\u8db3,\\u7136\\u5f8c\\u53ef\\u4ee5\\u57f7\\u884cPerformUpKeep,\\n    //\\u82e5\\u6b64function return\\u70batrue\\u5c31\\u6703\\u57f7\\u884cPerformUpKeep function\\n    //perfromData\\u5167 \\u53ef\\u4ee5\\u5beb\\u8981\\u50b3\\u7d66PerformUpKeep function\\u7684\\u8b8a\\u6578, \\u9019\\u908a\\u8a3b\\u89e3\\u8d77\\u4f86\\u662f\\u56e0\\u7232\\u73fe\\u5728\\u7528\\u4e0d\\u5230performData\\u8b8a\\u6578\\n    function checkUpkeep(\\n        bytes memory /* checkdata */\\n    )\\n        public\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        //\\u6aa2\\u67e5\\u5408\\u7d04\\u662f\\u5426\\u70ba\\u958b\\u555f\\u72c0\\u614b\\n        bool isOpen = (s_raffleState == RaffleState.OPEN);\\n        //\\u6aa2\\u67e5\\u6642\\u9593\\u662f\\u5426\\u8d85\\u904e\\u4e86\\u6307\\u5b9a\\u7684\\u9593\\u9694\\u6642\\u9593\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        //\\u6aa2\\u67e5\\u73a9\\u5bb6\\u662f\\u5426\\u5927\\u65bc0\\n        bool hasPlayers = (s_players.length > 0);\\n        //\\u6aa2\\u67e5\\u5408\\u7d04\\u91d1\\u984d\\u662f\\u5426\\u5927\\u65bc0\\n        bool hasBalance = (address(this).balance > 0);\\n        //upkeepNeeded\\u8b8a\\u6578\\u4e0d\\u7528\\u5ba3\\u544a\\u662f\\u56e0\\u70ba\\u5728returns\\u4e2d\\u5df2\\u7d93\\u5ba3\\u544a\\u904e\\u4e86,\\u82e5\\u524d\\u56db\\u500b\\u8b8a\\u6578\\u70batrue,\\u624d\\u70batrue\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        //\\u64f7\\u53d6\\u547c\\u53ebcheckUpkeep function\\u7684return\\u503c,\\u4f5c\\u70ba\\u5224\\u65b7\\u5f0f\\u7684\\u689d\\u4ef6,\\u800c\\u6211\\u5011\\u6c92\\u6709\\u4f7f\\u7528performData,\\u6240\\u4ee5\\u7559\\u7a7a,\\u53ea\\u7559\\u4e0b\\u4e00\\u500b\\u9017\\u865f\\n        //\\u4e14\\u547c\\u53eb\\u6b64function\\u4e5f\\u6c92\\u6709\\u8f38\\u5165\\u53c3\\u6578,\\u6240\\u4ee5\\u4e5f\\u7559\\u7a7a,\\u5beb\\u5165\\u96d9\\u5f15\\u865f\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        //\\u82e5upkeepNeeded\\u70bafalse\\n        if (!upkeepNeeded) {\\n            //revert \\u8f38\\u51fa\\u7684error\\u5e36\\u5165\\u4ee5\\u4e0b\\u53c3\\u6578,\\u5408\\u7d04\\u7684\\u9918\\u984d,s_players\\u9663\\u5217\\u9577\\u5ea6(\\u53c3\\u52a0\\u4eba\\u6578),\\u5408\\u7d04\\u72c0\\u614b(\\u56e0\\u70ba\\u662f\\u7279\\u5225\\u7684\\u985e\\u578b,\\u6240\\u4ee5\\u8f49\\u63db\\u6210uint,\\u7528index\\u6578\\u5b57\\u4ee3\\u8868)\\n            revert Raffle__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint(s_raffleState)\\n            );\\n        }\\n\\n        //\\u5728\\u53d6\\u5f97\\u96a8\\u6a5f\\u6578\\u524d,\\u5148\\u5c07\\u5408\\u7d04\\u8a2d\\u5b9a\\u70baCALCULATING,\\u66ab\\u6642\\u4e0d\\u5141\\u8a31\\u4efb\\u4f55\\u4eba\\u52a0\\u5165\\n        s_raffleState = RaffleState.CALCULATING;\\n        //\\u4f7f\\u7528\\u95dc\\u806f\\u597d\\u7684i_COORDINATOR,\\u547c\\u53eb\\u5176\\u4e2d\\u7684requestRandomWords function,\\u50b3\\u5165\\u5ba3\\u544a\\u597d\\u7684\\u53c3\\u6578,\\u88fd\\u4f5crequest\\n        uint256 requestId = i_COORDINATOR.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        //\\u7576\\u547c\\u53ebrequestRandomWords\\u6642 \\u56de\\u50b3\\u53d6\\u5f97requestId\\u6642 \\u89f8\\u767cevent\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    //\\u9019\\u500bfulfillRandomWords\\u5ba3\\u544a\\u70baoverride,\\u6703\\u8986\\u84cb\\u6389VRFConsumerBaseV2\\u7684fulfillRandomWords\\u7684virtual\\n    //\\u9019\\u500bfunction\\u662f\\u7528\\u4f86\\u7d66Oracle\\u9810\\u8a00\\u6a5f\\u547c\\u53eb\\u7684,\\u7528\\u4f86\\u5c07\\u96a8\\u6a5f\\u6578callback\\u7d66\\u4f7f\\u7528\\u8005,\\u6240\\u4ee5\\u6709\\u5169\\u500b\\u53c3\\u6578\\n    //_requestId,randomWords,\\u5176\\u4e2drandomWords\\u662f\\u4e00\\u500buint256\\u7684\\u9663\\u5217,\\u7528\\u4f86\\u5b58\\u653erequest\\u56de\\u50b3\\u800c\\u4f86\\u7684\\u96a8\\u6a5f\\u6578\\n    //\\u4e00\\u6b21\\u8acb\\u6c42\\u7684\\u96a8\\u6a5f\\u6578\\u8d8a\\u591a\\u8a72\\u9663\\u5217\\u9577\\u5ea6\\u5c31\\u6703\\u8b8a\\u5927\\n    function fulfillRandomWords(\\n        uint256, /*_requestId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        //\\u7531\\u65bc\\u6211\\u5011\\u8981\\u4f7f\\u7528\\u53d6\\u5f97\\u7684\\u96a8\\u6a5f\\u6578,\\u4f86\\u627e\\u51fa\\u52dd\\u5229\\u8005,\\u4e14\\u6b64\\u5408\\u7d04\\u4e00\\u6b21\\u7684request\\u53ea\\u6709\\u53d6\\u5f97\\u4e00\\u500b\\u96a8\\u6a5f\\u6578\\n        //\\u56e0\\u6b64\\u56de\\u50b3\\u7684\\u96a8\\u6a5f\\u6578\\u6703\\u5b58\\u5728randomWords[0]\\u5167,\\u4f7f\\u7528\\u96a8\\u6a5f\\u6578\\u8207s_players\\u9663\\u5217\\u9577\\u5ea6\\u53d6\\u9918\\u6578,\\u5c31\\u80fd\\u5920\\u904d\\u6b77\\u9663\\u5217,\\u627e\\u51fa\\u52dd\\u5229\\u8005\\n        //\\u5c07\\u9918\\u6578,\\u5b58\\u5728\\u8b8a\\u6578\\u5167\\n        uint indexOfWinner = randomWords[0] % s_players.length;\\n        //\\u5c07\\u9918\\u6578\\u7576\\u4f5c\\u9663\\u5217\\u7684index\\u627e\\u51fa\\u7576\\u524d\\u52dd\\u5229\\u8005\\u7684\\u5730\\u5740\\n        address payable recentWinner = s_players[indexOfWinner];\\n        //\\u5c07\\u52dd\\u5229\\u8005\\u7684\\u5730\\u5740\\u5b58\\u70ba\\u5168\\u57df\\u8b8a\\u6578\\n        s_recentWinner = recentWinner;\\n        //\\u9078\\u51fa\\u52dd\\u5229\\u8005\\u5f8c\\u5c07s_players\\u9663\\u5217\\u6b780\\n        s_players = new address payable[](0);\\n        //\\u5c07timeStamp\\u91cd\\u65b0reset,\\u7528\\u4f86\\u91cd\\u65b0\\u8a08\\u7b97\\u7d93\\u904e\\u7279\\u5b9a\\u6642\\u9593\\u624d\\u9078\\u51fa\\u7372\\u52dd\\u8005\\n        s_lastTimeStamp = block.timestamp;\\n        //\\u9078\\u51fa\\u52dd\\u5229\\u8005\\u5f8c,\\u5c07\\u5408\\u7d04\\u958b\\u555f,\\u5141\\u8a31\\u5165\\u91d1\\n        s_raffleState = RaffleState.OPEN;\\n        //\\u5c07\\u5408\\u7d04\\u6240\\u6709\\u7684\\u8cc7\\u91d1\\u8f49\\u7d66\\u52dd\\u5229\\u8005,\\u4f7f\\u7528function\\u88e1\\u9762\\u7684\\u8b8a\\u6578\\u8f03\\u5b89\\u5168,\\u9632\\u6b62\\u6709\\u4eba\\u5077\\u6539\\u5168\\u57df\\u8b8a\\u6578\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    /* Pure / View function */\\n    //\\u53d6\\u5f97\\u6700\\u5c0f\\u5165\\u91d1\\u91d1\\u984d\\n    function getEntranceFee() public view returns (uint) {\\n        return i_entranceFee;\\n    }\\n\\n    //\\u53d6\\u5f97\\u5165\\u91d1\\u5730\\u5740\\n    function getPlayer(uint _index) public view returns (address) {\\n        return s_players[_index];\\n    }\\n\\n    //\\u986f\\u793a\\u6700\\u8fd1\\u7372\\u52dd\\u8005\\u7684\\u5730\\u5740\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    //\\u986f\\u793a\\u5408\\u7d04\\u7684\\u72c0\\u614b\\n    function getRaffleState() public view returns (RaffleState) {\\n        return s_raffleState;\\n    }\\n\\n    //\\u4e00\\u6b21\\u9078\\u51fa\\u5e7e\\u500b\\u7372\\u52dd\\u8005(\\u4e00\\u6b21\\u7372\\u5f97\\u5e7e\\u500b\\u96a8\\u6a5f\\u6578)\\n    function getNumWords() public pure returns (uint) {\\n        return NUM_WORDS;\\n    }\\n\\n    //\\u986f\\u793a\\u76ee\\u524d\\u5e7e\\u500b\\u73a9\\u5bb6\\n    function getNumberOfPlayers() public view returns (uint) {\\n        return s_players.length;\\n    }\\n\\n    //\\u4e0a\\u6b21\\u7684\\u5340\\u584a\\u6642\\u9593\\n    function getLatestTimeStamp() public view returns (uint) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    //\\u986f\\u793a\\u96a8\\u6a5f\\u6578\\u9700\\u8981\\u5e7e\\u6b21\\u78ba\\u8a8d,pure\\u7684\\u539f\\u56e0\\u662f\\u56e0\\u70ba\\u8a72\\u8b8a\\u6578\\u662fconstant\\n    function getRequestComfirmations() public pure returns (uint) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    //\\u4e2d\\u734e\\u6a5f\\u7387\\n    function getWinnerChance() public view returns (uint) {\\n        uint chance = NUM_WORDS / s_players.length;\\n        return chance;\\n    }\\n\\n    function getInterval() public view returns (uint) {\\n        return i_interval;\\n    }\\n}\\n\",\"keccak256\":\"0x8bf0980d3d40dd5e5a38e21d12f1213d5c3ee1212f9dcf68b505bdbdea0bb0d2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200189c3803806200189c833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff16815250508163ffffffff166101208163ffffffff16815250506000600160146101000a81548160ff021916908360018111156200010d576200010c62000330565b5b0217905550426002819055508061014081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e0516101005161012051610140516114cd620003cf6000396000818161082c015261089a015260006106f8015260006106d5015260006106b401526000610678015260008181610340015261044a01526000818161038a01526103de01526114cd6000f3fe6080604052600436106100dd5760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461027e5780639e35072d146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b8063473f1ddc146101ea57806353a2c19a146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c578063320229eb146101965780634585e33b146101c1576100dd565b806309bc33a7146100e25780630a75a4fa1461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c26565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610c26565b60405180910390f35b34801561014457600080fd5b5061014d610371565b60405161015a9190610cb8565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610e6c565b610388565b005b610194610448565b005b3480156101a257600080fd5b506101ab6105b7565b6040516101b89190610c26565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190610f23565b6105c1565b005b3480156101f657600080fd5b506101ff6107b1565b60405161020c9190610fb1565b60405180910390f35b34801561022157600080fd5b5061022a6107db565b6040516102379190610c26565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190611081565b6107ea565b604051610275929190611164565b60405180910390f35b34801561028a57600080fd5b50610293610896565b6040516102a09190610c26565b60405180910390f35b3480156102b557600080fd5b506102be6108be565b6040516102cb9190610c26565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190611194565b6108e2565b6040516103089190610fb1565b60405180910390f35b34801561031d57600080fd5b50610326610929565b6040516103339190610c26565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104319291906111c1565b60405180910390fd5b6104448282610935565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104a2576040517f046d209600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104b6576104b5610c41565b5b600160149054906101000a900460ff1660018111156104d8576104d7610c41565b5b1461050f576040517f32c4016500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105db604051806020016040528060008152506107ea565b5090508061064a5747600080549050600160149054906101000a900460ff16600181111561060c5761060b610c41565b5b6040517f584327aa000000000000000000000000000000000000000000000000000000008152600401610641939291906111ea565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066f5761066e610c41565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610739959493929190611299565b6020604051808303816000875af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190611301565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60006060600080600181111561080357610802610c41565b5b600160149054906101000a900460ff16600181111561082557610824610c41565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610859919061135d565b119050600080600080549050119050600080471190508380156108795750825b80156108825750815b801561088b5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600080549050600163ffffffff166108d991906113c0565b90508091505090565b60008082815481106108f7576108f66113f1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109505761094f6113f1565b5b60200260200101516109629190611420565b90506000808281548110610979576109786113f1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a0257610a01610d29565b5b604051908082528060200260200182016040528015610a305781602001602082028036833780820191505090505b5060009080519060200190610a46929190610b66565b50426002819055506000600160146101000a81548160ff02191690836001811115610a7457610a73610c41565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9f90611482565b60006040518083038185875af1925050503d8060008114610adc576040519150601f19603f3d011682016040523d82523d6000602084013e610ae1565b606091505b5050905080610b1c576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bdf579160200282015b82811115610bde5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b86565b5b509050610bec9190610bf0565b5090565b5b80821115610c09576000816000905550600101610bf1565b5090565b6000819050919050565b610c2081610c0d565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c8157610c80610c41565b5b50565b6000819050610c9282610c70565b919050565b6000610ca282610c84565b9050919050565b610cb281610c97565b82525050565b6000602082019050610ccd6000830184610ca9565b92915050565b6000604051905090565b600080fd5b600080fd5b610cf081610c0d565b8114610cfb57600080fd5b50565b600081359050610d0d81610ce7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6182610d18565b810181811067ffffffffffffffff82111715610d8057610d7f610d29565b5b80604052505050565b6000610d93610cd3565b9050610d9f8282610d58565b919050565b600067ffffffffffffffff821115610dbf57610dbe610d29565b5b602082029050602081019050919050565b600080fd5b6000610de8610de384610da4565b610d89565b90508083825260208201905060208402830185811115610e0b57610e0a610dd0565b5b835b81811015610e345780610e208882610cfe565b845260208401935050602081019050610e0d565b5050509392505050565b600082601f830112610e5357610e52610d13565b5b8135610e63848260208601610dd5565b91505092915050565b60008060408385031215610e8357610e82610cdd565b5b6000610e9185828601610cfe565b925050602083013567ffffffffffffffff811115610eb257610eb1610ce2565b5b610ebe85828601610e3e565b9150509250929050565b600080fd5b60008083601f840112610ee357610ee2610d13565b5b8235905067ffffffffffffffff811115610f0057610eff610ec8565b5b602083019150836001820283011115610f1c57610f1b610dd0565b5b9250929050565b60008060208385031215610f3a57610f39610cdd565b5b600083013567ffffffffffffffff811115610f5857610f57610ce2565b5b610f6485828601610ecd565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9b82610f70565b9050919050565b610fab81610f90565b82525050565b6000602082019050610fc66000830184610fa2565b92915050565b600080fd5b600067ffffffffffffffff821115610fec57610feb610d29565b5b610ff582610d18565b9050602081019050919050565b82818337600083830152505050565b600061102461101f84610fd1565b610d89565b9050828152602081018484840111156110405761103f610fcc565b5b61104b848285611002565b509392505050565b600082601f83011261106857611067610d13565b5b8135611078848260208601611011565b91505092915050565b60006020828403121561109757611096610cdd565b5b600082013567ffffffffffffffff8111156110b5576110b4610ce2565b5b6110c184828501611053565b91505092915050565b60008115159050919050565b6110df816110ca565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111f578082015181840152602081019050611104565b60008484015250505050565b6000611136826110e5565b61114081856110f0565b9350611150818560208601611101565b61115981610d18565b840191505092915050565b600060408201905061117960008301856110d6565b818103602083015261118b818461112b565b90509392505050565b6000602082840312156111aa576111a9610cdd565b5b60006111b884828501610cfe565b91505092915050565b60006040820190506111d66000830185610fa2565b6111e36020830184610fa2565b9392505050565b60006060820190506111ff6000830186610c17565b61120c6020830185610c17565b6112196040830184610c17565b949350505050565b6000819050919050565b61123481611221565b82525050565b600067ffffffffffffffff82169050919050565b6112578161123a565b82525050565b600061ffff82169050919050565b6112748161125d565b82525050565b600063ffffffff82169050919050565b6112938161127a565b82525050565b600060a0820190506112ae600083018861122b565b6112bb602083018761124e565b6112c8604083018661126b565b6112d5606083018561128a565b6112e2608083018461128a565b9695505050505050565b6000815190506112fb81610ce7565b92915050565b60006020828403121561131757611316610cdd565b5b6000611325848285016112ec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061136882610c0d565b915061137383610c0d565b925082820390508181111561138b5761138a61132e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113cb82610c0d565b91506113d683610c0d565b9250826113e6576113e5611391565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061142b82610c0d565b915061143683610c0d565b92508261144657611445611391565b5b828206905092915050565b600081905092915050565b50565b600061146c600083611451565b91506114778261145c565b600082019050919050565b600061148d8261145f565b915081905091905056fea264697066735822122073a17f19c63dc44034cf0b32b6f87b4c21362b6852c4b0aeacb05eff9880758c64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063473f1ddc1161007f57806391ad27b41161005957806391ad27b41461027e5780639e35072d146102a9578063e55ae4e8146102d4578063fd6673f514610311576100dd565b8063473f1ddc146101ea57806353a2c19a146102155780636e04ff0d14610240576100dd565b80631fe543e3116100bb5780631fe543e3146101635780632cfcc5391461018c578063320229eb146101965780634585e33b146101c1576100dd565b806309bc33a7146100e25780630a75a4fa1461010d578063115cbaf514610138575b600080fd5b3480156100ee57600080fd5b506100f761033c565b6040516101049190610c26565b60405180910390f35b34801561011957600080fd5b50610122610364565b60405161012f9190610c26565b60405180910390f35b34801561014457600080fd5b5061014d610371565b60405161015a9190610cb8565b60405180910390f35b34801561016f57600080fd5b5061018a60048036038101906101859190610e6c565b610388565b005b610194610448565b005b3480156101a257600080fd5b506101ab6105b7565b6040516101b89190610c26565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190610f23565b6105c1565b005b3480156101f657600080fd5b506101ff6107b1565b60405161020c9190610fb1565b60405180910390f35b34801561022157600080fd5b5061022a6107db565b6040516102379190610c26565b60405180910390f35b34801561024c57600080fd5b5061026760048036038101906102629190611081565b6107ea565b604051610275929190611164565b60405180910390f35b34801561028a57600080fd5b50610293610896565b6040516102a09190610c26565b60405180910390f35b3480156102b557600080fd5b506102be6108be565b6040516102cb9190610c26565b60405180910390f35b3480156102e057600080fd5b506102fb60048036038101906102f69190611194565b6108e2565b6040516103089190610fb1565b60405180910390f35b34801561031d57600080fd5b50610326610929565b6040516103339190610c26565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600361ffff16905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016104319291906111c1565b60405180910390fd5b6104448282610935565b5050565b7f00000000000000000000000000000000000000000000000000000000000000003410156104a2576040517f046d209600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104b6576104b5610c41565b5b600160149054906101000a900460ff1660018111156104d8576104d7610c41565b5b1461050f576040517f32c4016500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b6000600254905090565b60006105db604051806020016040528060008152506107ea565b5090508061064a5747600080549050600160149054906101000a900460ff16600181111561060c5761060b610c41565b5b6040517f584327aa000000000000000000000000000000000000000000000000000000008152600401610641939291906111ea565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561066f5761066e610c41565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610739959493929190611299565b6020604051808303816000875af1158015610758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077c9190611301565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b60006060600080600181111561080357610802610c41565b5b600160149054906101000a900460ff16600181111561082557610824610c41565b5b14905060007f000000000000000000000000000000000000000000000000000000000000000060025442610859919061135d565b119050600080600080549050119050600080471190508380156108795750825b80156108825750815b801561088b5750805b955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600080549050600163ffffffff166108d991906113c0565b90508091505090565b60008082815481106108f7576108f66113f1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008080549050905090565b60008080549050826000815181106109505761094f6113f1565b5b60200260200101516109629190611420565b90506000808281548110610979576109786113f1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610a0257610a01610d29565b5b604051908082528060200260200182016040528015610a305781602001602082028036833780820191505090505b5060009080519060200190610a46929190610b66565b50426002819055506000600160146101000a81548160ff02191690836001811115610a7457610a73610c41565b5b021790555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a9f90611482565b60006040518083038185875af1925050503d8060008114610adc576040519150601f19603f3d011682016040523d82523d6000602084013e610ae1565b606091505b5050905080610b1c576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610bdf579160200282015b82811115610bde5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b86565b5b509050610bec9190610bf0565b5090565b5b80821115610c09576000816000905550600101610bf1565b5090565b6000819050919050565b610c2081610c0d565b82525050565b6000602082019050610c3b6000830184610c17565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c8157610c80610c41565b5b50565b6000819050610c9282610c70565b919050565b6000610ca282610c84565b9050919050565b610cb281610c97565b82525050565b6000602082019050610ccd6000830184610ca9565b92915050565b6000604051905090565b600080fd5b600080fd5b610cf081610c0d565b8114610cfb57600080fd5b50565b600081359050610d0d81610ce7565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d6182610d18565b810181811067ffffffffffffffff82111715610d8057610d7f610d29565b5b80604052505050565b6000610d93610cd3565b9050610d9f8282610d58565b919050565b600067ffffffffffffffff821115610dbf57610dbe610d29565b5b602082029050602081019050919050565b600080fd5b6000610de8610de384610da4565b610d89565b90508083825260208201905060208402830185811115610e0b57610e0a610dd0565b5b835b81811015610e345780610e208882610cfe565b845260208401935050602081019050610e0d565b5050509392505050565b600082601f830112610e5357610e52610d13565b5b8135610e63848260208601610dd5565b91505092915050565b60008060408385031215610e8357610e82610cdd565b5b6000610e9185828601610cfe565b925050602083013567ffffffffffffffff811115610eb257610eb1610ce2565b5b610ebe85828601610e3e565b9150509250929050565b600080fd5b60008083601f840112610ee357610ee2610d13565b5b8235905067ffffffffffffffff811115610f0057610eff610ec8565b5b602083019150836001820283011115610f1c57610f1b610dd0565b5b9250929050565b60008060208385031215610f3a57610f39610cdd565b5b600083013567ffffffffffffffff811115610f5857610f57610ce2565b5b610f6485828601610ecd565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9b82610f70565b9050919050565b610fab81610f90565b82525050565b6000602082019050610fc66000830184610fa2565b92915050565b600080fd5b600067ffffffffffffffff821115610fec57610feb610d29565b5b610ff582610d18565b9050602081019050919050565b82818337600083830152505050565b600061102461101f84610fd1565b610d89565b9050828152602081018484840111156110405761103f610fcc565b5b61104b848285611002565b509392505050565b600082601f83011261106857611067610d13565b5b8135611078848260208601611011565b91505092915050565b60006020828403121561109757611096610cdd565b5b600082013567ffffffffffffffff8111156110b5576110b4610ce2565b5b6110c184828501611053565b91505092915050565b60008115159050919050565b6110df816110ca565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561111f578082015181840152602081019050611104565b60008484015250505050565b6000611136826110e5565b61114081856110f0565b9350611150818560208601611101565b61115981610d18565b840191505092915050565b600060408201905061117960008301856110d6565b818103602083015261118b818461112b565b90509392505050565b6000602082840312156111aa576111a9610cdd565b5b60006111b884828501610cfe565b91505092915050565b60006040820190506111d66000830185610fa2565b6111e36020830184610fa2565b9392505050565b60006060820190506111ff6000830186610c17565b61120c6020830185610c17565b6112196040830184610c17565b949350505050565b6000819050919050565b61123481611221565b82525050565b600067ffffffffffffffff82169050919050565b6112578161123a565b82525050565b600061ffff82169050919050565b6112748161125d565b82525050565b600063ffffffff82169050919050565b6112938161127a565b82525050565b600060a0820190506112ae600083018861122b565b6112bb602083018761124e565b6112c8604083018661126b565b6112d5606083018561128a565b6112e2608083018461128a565b9695505050505050565b6000815190506112fb81610ce7565b92915050565b60006020828403121561131757611316610cdd565b5b6000611325848285016112ec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061136882610c0d565b915061137383610c0d565b925082820390508181111561138b5761138a61132e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113cb82610c0d565b91506113d683610c0d565b9250826113e6576113e5611391565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061142b82610c0d565b915061143683610c0d565b92508261144657611445611391565b5b828206905092915050565b600081905092915050565b50565b600061146c600083611451565b91506114778261145c565b600082019050919050565b600061148d8261145f565b915081905091905056fea264697066735822122073a17f19c63dc44034cf0b32b6f87b4c21362b6852c4b0aeacb05eff9880758c64736f6c63430008110033",
  "devdoc": {
    "author": "kiralee.eth",
    "details": "透過導入Chainlink VRF v2 和 Chainlink keepers來完成這個合約",
    "kind": "dev",
    "methods": {},
    "title": "一個簡單的彩票合約",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "這個合約是建立一個不可篡改的去中心化智能合約",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 208,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 225,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address_payable"
      },
      {
        "astId": 228,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)203"
      },
      {
        "astId": 230,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)203": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}